[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "gpt-shell",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "00_setup.html",
    "href": "00_setup.html",
    "title": "1  환경설정",
    "section": "",
    "text": "2 OpenAI 모형\nOpenAI에서 제공하는 다양한 모델을 확인할 수 있다. system이 소유한 GPT 모형을 살펴보자.\n프로그램 코드(code) 관련된 GPT 모형도 확인할 수 있다."
  },
  {
    "objectID": "00_setup.html#가상환경-설정",
    "href": "00_setup.html#가상환경-설정",
    "title": "1  환경설정",
    "section": "1.1 가상환경 설정",
    "text": "1.1 가상환경 설정\n다양한 가상환경이 있어 필요한 패키지를 사용하여 파이썬 가상환경을 구축한다. 파이썬 3.3 버전부터 내장된 venv, 많이 사용되는 virtualenvwrapper, virtualenv 등이 유명하다. 본인 취향에 맞는 가상환경을 특정하여 업무에 사용한다. 다음은 venv를 사용해서 가상 개발환경을 구축하는 것을 예시로 보여주고 있다.\n## 디렉토리 생성 및 프로젝트 디렉토리 이동\nmkdir myproject\ncd myproject\n\n## 가상환경 생성\npython -m venv myenv\n\n## 가상환경 활성화\nmyenv\\Scripts\\activate # 윈도우즈\nsource myenv/bin/activate # 리눅스/맥\n\n## 가상환경 비활성화\ndeactivate"
  },
  {
    "objectID": "00_setup.html#api-key-얻기",
    "href": "00_setup.html#api-key-얻기",
    "title": "1  환경설정",
    "section": "1.2 API KEY 얻기",
    "text": "1.2 API KEY 얻기\n가상환경을 구축한 다음 OpenAI에서 제공하는 공식 API에 접근할 수 있는 API 키를 생성하는 것이다. https://openai.com/api/ 1 로 이동하여 계정을 만듭니다.\n안내에 따라 계정을 생성한 다음 https://platform.openai.com/account/api-keys 2 로 이동하여 API 키를 생성한다.\nAPI 키는 조직에 속해야 하며, 조직을 생성하라는 메시지가 표시되는 경우 조직명을 입력한다. 하나의 조직에 속한 경우 조직 ID(Organization ID)를 별도 생성할 필요는 없다. OpenAI 계정을 통해서는 생성한 API KEY는 다시 볼 수 없기 때문에 생성한 비밀 키를 안전하고 접근하기 쉬운 곳에 저장한다."
  },
  {
    "objectID": "00_setup.html#api-key-저장",
    "href": "00_setup.html#api-key-저장",
    "title": "1  환경설정",
    "section": "1.3 API KEY 저장",
    "text": "1.3 API KEY 저장\nAPI KEY를 환경변수로 지정하여 호출하는 방식도 있고, 작업 프로젝트 디렉토리에 로컬 파일에 저장하여 사용하는 방식도 있다. 먼저 윈도우에서 시스템으로 들어가서 환경 변수로 지정하면 해당 변수(OPENAI_API_KEY)를 다양한 프로그램에서 호출하여 사용할 수 있다.\n\n다른 방식은 .env와 같은 파일을 프로젝트 디렉토리 아래 숨긴 파일에 지정하여 사용하는 방식이다. 이런 경우 .gitignore 파일에 버전제어 대상에서 제외시켜 두는 것을 필히 기억한다."
  },
  {
    "objectID": "00_setup.html#헬로월드",
    "href": "00_setup.html#헬로월드",
    "title": "1  환경설정",
    "section": "1.4 헬로월드",
    "text": "1.4 헬로월드\nOpenAI API KEY도 준비가 되었으면 헬로월드 프로그램을 작성해보자. 개발자가 하나의 조직에 속한 경우, API KEY를 운영체제 환경변수로 지정한 경우 다음과 같이 시스템 환경에서 OPENAI_API_KEY 키를 가져와서 OpenAI에서 제공하는 모델목록을 확인할 수 있다.\n\nimport os\nimport openai\n\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\n# API 호출 및 모델 목록 출력\nmodels = openai.Model.list()\nprint(models['data'][0])\n\n{\n  \"created\": 1649358449,\n  \"id\": \"babbage\",\n  \"object\": \"model\",\n  \"owned_by\": \"openai\",\n  \"parent\": null,\n  \"permission\": [\n    {\n      \"allow_create_engine\": false,\n      \"allow_fine_tuning\": false,\n      \"allow_logprobs\": true,\n      \"allow_sampling\": true,\n      \"allow_search_indices\": false,\n      \"allow_view\": true,\n      \"created\": 1669085501,\n      \"group\": null,\n      \"id\": \"modelperm-49FUp5v084tBB49tC4z8LPH5\",\n      \"is_blocking\": false,\n      \"object\": \"model_permission\",\n      \"organization\": \"*\"\n    }\n  ],\n  \"root\": \"babbage\"\n}\n\n\n다른 방식은 로컬 파일에 API KEY와 ORG ID 를 저장하고 이를 불러와서 개발에 사용하는 방식이다.\n\nimport os\nimport openai\n\n# .env 파일에서 API_KEY 와 ORG_ID 을 읽어온다.\nwith open(\".env\") as lines:\n  for line in lines:\n    key, value = line.strip().split(\"=\")\n    os.environ[key] = value\n    \n# api_key와 organization 지정\nopenai.api_key = os.environ.get(\"API_KEY\")\nopenai.organization = os.environ.get(\"ORG_ID\")\n\n# API 호출 및 모델 목록 출력\ngpt_models = openai.Model.list()\n\nprint(gpt_models['data'][0])\n\n{\n  \"created\": 1649358449,\n  \"id\": \"babbage\",\n  \"object\": \"model\",\n  \"owned_by\": \"openai\",\n  \"parent\": null,\n  \"permission\": [\n    {\n      \"allow_create_engine\": false,\n      \"allow_fine_tuning\": false,\n      \"allow_logprobs\": true,\n      \"allow_sampling\": true,\n      \"allow_search_indices\": false,\n      \"allow_view\": true,\n      \"created\": 1669085501,\n      \"group\": null,\n      \"id\": \"modelperm-49FUp5v084tBB49tC4z8LPH5\",\n      \"is_blocking\": false,\n      \"object\": \"model_permission\",\n      \"organization\": \"*\"\n    }\n  ],\n  \"root\": \"babbage\"\n}"
  }
]