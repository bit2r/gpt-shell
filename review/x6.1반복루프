
윤문)

basilisk.dat, minotaur.dat, unicorn.dat 등으로 이름 붙여진 게놈 데이터 파일이 수백 개
있다고 가정하자.
이번 장에, 단지 3개 예제 파일만 있는 exercise-data/creatures 디렉토리를 사용할 것이
지만 동일한 원칙은 훨씬 더 많은 파일에 즉시 적용될 수 있다.

--> 단락화

basilisk.dat, minotaur.dat, unicorn.dat 등으로 이름 붙여진 게놈 데이터 파일이 수백 개
있다고 가정하자. 이번 장에, 단지 3개 예제 파일만 있는 exercise-data/creatures 디렉토리를 사용할 것이
지만 동일한 원칙은 훨씬 더 많은 파일에 즉시 적용될 수 있다.

######################


구조 점검)

6.1.1 프롬프트 따라하기가 있습니다.

6.1.2는 없고요. 다른말로 하면, 편/장/절/단의 구조에서 단이 하나라는 것입니다.

단을 생략하는 것을 추천드립니다.

아울러 앞의 장에서는 단의 번호가 없었는데요. 이번에는 6.1.2 등으로 있네요.

일관성 검토해주세요.

#############################

구성 점검)

루프안에서 타이핑을 할 때, 쉘 프롬프트가 $에서 >으로 바뀐다. 두번째 프롬프트는, >,
온전한 명령문 타이핑이 끝마치지 않았음을 상기시키려고 다르게 표기된다. 세미콜론 ;
을 사용해서 두 명령어로 구성된 문장을 단일 명령줄로 단순화한다.

에 해당하는 사례가 다음에 나오지 않는 것 같아요. 다소 생뚱맞는 느낌?

#############################

단락화) [동일한 기호, 하지만 다른 의미]

쉘 프롬프트로 > 기호가 사용되는 것을 확인했지만, > 기호는 출력결과를 방향변경
(redirect) 하는데도 사용된다. 유사하게 $ 기호를 쉘 프롬프트로 사용했지만, 앞에서
살펴봤듯이, 쉘로 하여금 변수값을 추출하는데도 사용된다.
쉘이 > 혹은 $ 기호를 출력하게 되면, 사용자가 뭔가 타이핑하길 기대하고 있다는
것으로 해당 기호는 프롬프트를 의미한다.
사용자 본인이 > 혹은 $ 기호를 타이핑하게 되면, 출력결과를 방향변경하거나 변수
값을 끄집어내는 지시를 쉘에 전달하게 된다.

--> 세개의 문장입니다. 하나의 단락으로 만드는 것 추천.

##################

윤문)

(x같은) 의미없는 이름이나, (temperature
같은) 오해를 줄 수 있는 이름은 오해를 불러일으켜서 독자가 생각하기에 당연히 프로그
램이 수행해야 할 작업을 프로그램이 수행하지 못하게 할 가능성을 높인다.

-->

(x같은) 의미없는 이름이나, (temperature
같은) 오해를 불러일으킬 수 있는 이름은 독자가 생각하기에 당연히 프로그
램이 수행해야 할 작업을 프로그램이 수행하지 못하게 할 가능성을 높인다.