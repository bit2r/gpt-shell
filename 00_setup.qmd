# 환경설정

```{r init, include=FALSE}
source(here::here("_extensions", "bit2r", "bitPublish", "init_environments.R"))
```


```{r}
#| echo: false
#| results: asis
titlebox_block("챗GPT와 유닉스 쉘에서는 파일 시스템과 쉘의 기초를 소개한다. 컴퓨터에 파일을 저장해 본 적이 있고 '파일'이라는 단어와 '디렉토리' 또는 '폴더'(의미 동일한 두 가지 단어)를 알고 있다면 준비가 된 것이다.", title = "학습목표", theme = "bluejeans")
```

"챗GPT와 유닉스 쉘(Unix Shell)"은 전세계적으로 수천번의 워크샵과 국내에서도 수년동안 소프트웨어 카펜트리 워크샵 경험을 정식 교재를 통해서 한글화하여 출판을 준비하면서 최근에 큰 반향을 일으키고 있는 챗GPT 관련 내용도 담아내어 한번 학습하여 평생토록 활용할 수 있는 것에 방점을 두고 있다.\cite{greg_wilson_2019_3266823}

```{r}
#| echo: false
library(reticulate)

use_condaenv(condaenv = 'gpt-shell')
```


OpenAI GPT 제품은 파이썬이 주 개발언어로 되어 있어 
파이썬을 기준으로 챗GPT 개발을 진행한다.
일반적인 API를 활용한 파이썬 개발작업흐름은 
먼저, 가상환경을 구축하고, API KEY를 발급받고
해당 `openai` 패키지를 설치하고 헬로월드를 찍고 본격적인
AI 제품 개발을 진행하는 방식으로 추진한다.


```{mermaid}
graph LR
  A["1. 가상환경 구축"] --> B["2. API KEY 발급받기"]
  B --> C["3. API KEY 저장"]
  C --> D["4. openai 패키지 설치"]
  D --> E["5. 헬로 월드"]
```


## 가상환경 설정

다양한 가상환경이 있어 필요한 패키지를 사용하여 파이썬 가상환경을 구축한다.
파이썬 3.3 버전부터 내장된 `venv`, 많이 사용되는 `virtualenvwrapper`, `virtualenv` 등이 유명하다.
본인 취향에 맞는 가상환경을 특정하여 업무에 사용한다. 다음은 `venv`를 사용해서 가상 개발환경을 구축하는 것을 예시로 보여주고 있다.

```bash
## 디렉토리 생성 및 프로젝트 디렉토리 이동
mkdir myproject
cd myproject

## 가상환경 생성
python -m venv myenv

## 가상환경 활성화
myenv\Scripts\activate # 윈도우즈
source myenv/bin/activate # 리눅스/맥

## 가상환경 비활성화
deactivate
```

## API KEY 얻기

가상환경을 구축한 다음 OpenAI에서 제공하는 공식 API에 접근할 수 있는 API 키를 생성하는 것이다.
https://openai.com/api/ [^openai-api] 로 이동하여 계정을 만듭니다.

[^openai-api]: <https://openai.com/api/>

안내에 따라 계정을 생성한 다음 https://platform.openai.com/account/api-keys [^openai-api-key] 로 이동하여 API 키를 생성한다.

[^openai-api-key]: <https://platform.openai.com/account/api-keys>

API 키는 조직에 속해야 하며, 조직을 생성하라는 메시지가 표시되는 경우 조직명을 입력한다.
하나의 조직에 속한 경우 조직 ID(Organization ID)를 별도 생성할 필요는 없다.
OpenAI 계정을 통해서는 생성한 API KEY는  다시 볼 수 없기 때문에 생성한 비밀 키를 안전하고 접근하기 쉬운 곳에 저장한다. 

## API KEY 저장

API KEY를 환경변수로 지정하여 호출하는 방식도 있고,
작업 프로젝트 디렉토리에 로컬 파일에 저장하여 사용하는 방식도 있다.
먼저 윈도우에서 `시스템`으로 들어가서 `환경 변수`로 지정하면 해당 변수(`OPENAI_API_KEY`)를 
다양한 프로그램에서 호출하여 사용할 수 있다.

![](images/openai_api_export.jpg)

다른 방식은 `.env`와 같은 파일을 프로젝트 디렉토리 아래 숨긴 파일에 지정하여 사용하는 방식이다.
이런 경우 `.gitignore` 파일에 버전제어 대상에서 제외시켜 두는 것을 필히 기억한다.

![](images/openai_api_file.jpg)


## 헬로월드

OpenAI API KEY도 준비가 되었으면 헬로월드 프로그램을 작성해보자.
개발자가 하나의 조직에 속한 경우, API KEY를 운영체제 환경변수로 지정한 경우
다음과 같이 시스템 환경에서 `OPENAI_API_KEY` 키를 가져와서 OpenAI에서 제공하는 
모델목록을 확인할 수 있다.

```{python}
#| eval: true
import os
import openai

openai.api_key = os.getenv("OPENAI_API_KEY")

# API 호출 및 모델 목록 출력
models = openai.Model.list()
print(models['data'][0])
```

다른 방식은 로컬 파일에 API KEY와 ORG ID 를 저장하고 이를 불러와서 개발에 사용하는 방식이다.

```{python}
#| eval: true
import os
import openai

# .env 파일에서 API_KEY 와 ORG_ID 을 읽어온다.
with open(".env") as lines:
  for line in lines:
    key, value = line.strip().split("=")
    os.environ[key] = value
    
# api_key와 organization 지정
openai.api_key = os.environ.get("API_KEY")
openai.organization = os.environ.get("ORG_ID")

# API 호출 및 모델 목록 출력
gpt_models = openai.Model.list()

print(gpt_models['data'][0])
```

# OpenAI 모형

OpenAI에서 제공하는 다양한 모델을 확인할 수 있다.
`system`이 소유한 GPT 모형을 살펴보자.

```{r}
library(reticulate)
library(tidyverse)

py_gpt_models <- py$gpt_models$data

gpt_models_tbl <- tibble(created = map_chr(py_gpt_models, "created"),
                         id = map_chr(py_gpt_models, "id"),
                         object = map_chr(py_gpt_models, "object"),
                         owned_by = map_chr(py_gpt_models, "owned_by")) %>% 
  mutate(created = anytime::anydate(as.integer(created))) %>% 
  arrange(desc(created)) 

gpt_models_tbl %>% 
  filter(owned_by == "system") %>% 
  gt::gt() %>% 
  gtExtras::gt_theme_nytimes()
```

프로그램 코드(`code`) 관련된 GPT 모형도 확인할 수 있다.

```{r}
gpt_models_tbl %>% 
  filter(str_detect(id, "code")) %>% 
  gt::gt() %>% 
  gtExtras::gt_theme_nytimes()
```


