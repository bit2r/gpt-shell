

\begin{shadequote}[r]{화이트헤드(Alfred North Whitehead)}
문명은 생각하지 않고, 수행할 수 있는 중요한 작업의 수를 늘리면서 발전한다.(Civilization advances by extending the number of important operations which we can perform without thinking about them.)
\end{shadequote}


"챗GPT와 유닉스 쉘(Unix Shell)"은 전세계적으로 수천번의 워크샵과 국내에서도 수년동안 소프트웨어 카펜트리\index{Software Carpentry}\index{소프트웨어 카펜트리} 워크샵 경험을 정식 교재를 통해서 한글화하여 출판을 준비하면서 최근에 큰 반향을 일으키고 있는 챗GPT\index{챗GPT}\index{ChatGPT} 관련 내용도 담아내어 한번 학습하여 평생토록 활용할 수 있는 것에 방점을 두고 있다.\cite{greg_wilson_2019_3266823}

# 쉘(Shell) 소개 {#shell}

**유닉스 쉘(Unix Shell)**\index{유닉스 쉘}\index{Unix!Shell}은 대부분의 컴퓨터 사용자가 살아온 것보다 오래 동안 존재했다. 
오래동안 생존한 이유는 사용자로 하여금 단지 키보드 몇번 쳐서 복잡한 작업을 수행할 수 있게 하는 강력한 도구이기 때문이다. 
좀더 중요하게는 기존의 프로그램을 새로운 방식으로 조합해서 반복적인 작업을 자동화함으로써, 동일한 작업을 반복적으로 하지 않게 만든다.  쉘 사용은 폭넓게 다양하고 강력한 도구와 컴퓨팅 자원(슈퍼컴퓨터와 "고성능 컴퓨팅(High Performance Computing, HPC)"이 포함)을 사용하는 근본이 된다.\index{HPC}\index{고성능 컴퓨팅}

## 배경 {#shell-background}

아주 높은 곳에서 바라모면, 컴퓨터는 네가지 일을 수행한다:

-   프로그램 실행
-   데이터 저장
-   컴퓨터간 상호 의사소통
-   사람과 상호작용


마지막 작업을 뇌-컴퓨터 연결, 음성 인터페이스를 포함한 다양한 많은 방식으로 수행하고 있고
최근 스마폰의 보급으로 모바일 인터페이스가 보편화되었지만, 
대부분 WIMP((Window 윈도우, Icon 아이콘, Mouse 마우스, Pointer 포인터)를 사용한다. 
1980년대까지 이러한 기술은 보편적이지 않았지만, 
기술의 뿌리는 1960년대 더그 엥겔바트(Doug Engelbart)의 작업에 기초하고 있고, 
"[The Mother of All Demos](http://www.youtube.com/watch?v=a11JDLBXtPQ)"에서 확인할 수 있다.

조금 더 멀리 거슬러 올라가면, 초기 컴퓨터와 상호작용하는 유일한 방법은 전선줄(와이어)로 연결하는 것이다. 
1950년에서 1980년 사이 대부분의 사람들은 라인 프린터(line printer)를 사용했다. 
이런 장치는 표준 키보드에 있는 문자, 숫자, 특수부호의 입력과 출력만 허용해서, 
프로그래밍 언어와 인터페이스는 이러한 제약사항에서 설계됐다.

여전히 전통적인 화면, 마우스, 터치패드, 키보드를 사용하고 있지만, 
터치 인터페이스와 음성 인터페이스도 점차 보편화되고 있다.

지금 대부분의 사람들이 사용하는 **그래픽 사용자 인터페이스(GUI, graphical user interface)**\index{GUI}\index{그래픽 사용자 인터페이스}과 구별하기 위해서 이런 종류의 인터페이스를 **명령-라인 인터페이스(CLI, command-line interface)**\index{CLI}\index{명령-라인 인터페이스}라고 한다. 
CLI의 핵심은 **읽기-평가-출력(REPL, read-evaluate-print loop) 루프**\index{REPL}이다: 사용자가 명령어를 타이핑하고 엔터(enter)/반환(return)키를 입력하면, 컴퓨터가 읽고, 실행하고, 결과를 출력한다. \index{읽기-평가-출력 루프}
즉, 사용자가 다른 명령을 타이핑하면 컴퓨터는 읽고 평가하고 출력하는 작업을 사용자가 로그 오프하고 시스템을 빠져 나갈때까지 무한 반복한다.
R/파이썬 프로그래밍 언어를 스크립트 방식이 아닌 콘솔에서 단순한 프로그램 제작 작업한 경험이 있다면 REPL 개념을 이미 숙지 하고 있는 것이다.

GUI는 WIMP(Window 윈도우, Icon 아이콘, Mouse 마우스, Pointer 포인터)를 사용한다.\index{WIMP}로 구성되는데 배우기 쉽고, 단순 작업에 대해서는 환상적이다. "클릭"하게 되면 명령이 "내가 원하는 작업을 수행해"라고 손쉽게 컴퓨터로 통역된다. 
하지만, 이런 마술은 단순한 작업을 수행하고, 정확하게 이러한 유형의 작업을 수행할 수 있는 프로그램에 한정된다.

만약 복잡하고, 특정 목적에 부합되는 훨씬 묵직한 작업을 컴퓨터에 내리고자 한다면,
난해하거나 어렵거나 할 필요는 없고, 명령 어휘가 몇개 필요하고 이를 사용하는데 필요한 단순한 문법만이 필요하다.

쉘이 이런 기능을 제공한다 - 단순한 언어로 이를 사용하는데 **명령-라인 인터페이스**가 필요하다.
명령라인 인터페이스의 심장은 **읽기-평가-출력 루프(REPL,read-evaluate-print loop)**다.
REPL로 불리는 이유는 쉘에 명령어를 타이핑하고 엔터키(Return)를 치면 컴퓨터가 명령어를 읽어들이고 나서, 평가(혹은 실행)하고 출력결과를 화면에 뿌린다. 또 다른 명령어를 입력할 때까지 대기하는 루푸를 반복하게 된다.


상기 묘사가 마치 사용자가 직접 명령어를 컴퓨터에 보내고, 
컴퓨터는 다시 사용자에게 직접 출력을 보내는 것처럼 들린다.
사실 중간에 **명령 쉘(command shell)**\index{명령 쉘}\index{Command Shell}로 불리는 프로그램이 있다. 
사용자가 타이핑하는 것은 쉘로 간다. 
쉘은 무슨 명령어를 수행할지 파악해서 컴퓨터에게 수행하도록 지시한다.
쉘을 *조개 껍데기(shell)*\index{조개 껍데기}\index{Shell}\index{쉘}로 불리는데 이유는 운영체제를 감싸서, 
추상화(Abstraction)하여 복잡성 일부를 숨겨 운영체제와 상호작용을 더 단순하게 하는 역할을 수행한다.\index{추상화}


## 배쉬 쉘 {#shell-bash}

**쉘(Shell)**은 또한 프로그램이다. 그러나 그것을 조금 특별하게 만드는 것은 스스로 연산을 수행하기보다 다른 프로그램을 실행한다는 점이다. 가장 일반적으로 사용되는 유닉스 쉘(Unix Shell)은 Bash(Bourne Again SHell)이다. 이 이름은 Stephen Bourne이 작성한 원래의 쉘에서 유래했으며, 이는 프로그래머들 사이에서 재치있는 이름으로 통한다. Bash는 대부분의 유닉스 기반 컴퓨터에 기본적으로 설치된 쉘이며, 유닉스와 유사한 도구를 제공하는 대부분의 윈도우용 패키지에도 적용되어 있다. \index{Bash}\index{배쉬}


Bash나 다른 쉘을 사용하면 프로그래밍을 작성하는 느낌이 난다. 마우스 사용보다는 명령어를 입력하는 것이 더 간결하며, 이 명령어들은 보통 2~3자리 문자로 이루어져 있다. 결과 출력 역시 그래픽보다는 텍스트 형태로 제공된다. 쉘의 강력한 장점 중 하나는 키보드 입력만으로 다량의 데이터를 자동으로 처리하는 파이프라인을 구축할 수 있다는 점이다. 또한, 멀리 떨어진 컴퓨터나 슈퍼컴퓨터와 상호작용하기에는 명령 라인이 가장 편리하다. 고성능 컴퓨팅 시스템에 포함된 다양한 특화 도구와 자원을 실행하는 데에는 쉘에 익숙해져야 한다. 클러스터 컴퓨팅과 클라우드 컴퓨팅이 과학적 데이터 분석(scientific data crunching)에 있어 점점 대중화됨에 따라 원격 컴퓨터를 구동하는 것이 필수적인 기술이 되었다. 여기서 배울 수 있는 명령-라인 기술을 기반으로 광범위한 과학적 질문과 컴퓨터적 도전을 처리할 수 있다. 

주요 유닉스 쉘에는 Bourne shell (sh), Bash, Zsh, C shell (csh), Tcsh, Korn shell (ksh) 등이 존재한다. Bash 는 Bourne shell (sh)과 뿌리를 공유하고 하위 호환성을 갖는다. Zsh, csh, Tcsh, ksh 를 비롯한 다양한 쉘 프로그램이 나름대로의 기능을 제시하며 사용자를 끌어들이고 있지만, 배쉬는 유닉스/리눅스 계열 운영 체제에서 가장 널리 사용되는 쉘 프로그램으로, 배쉬로 작성된 스크립트는 대부분의 시스템에서 잘 동작하는 스크립트 호환성이 가장 큰 장점이라 본서에서 이를 기본 쉘 프로그램으로 다룬다. \index{호환성} \index{Shell!Zsh} \index{Shell!Bash}

## 어려운가요? {#shell-difficulty}

GUI와 비교하여 컴퓨터와 상호작용하는데 있어 다른 방식을 취하고 있어, 익숙해지는데 다소
노력과 시간이 소요된다.
GUI는 선택지를 보여주고, 사용자가 선택지 중에서 선택하는 하는 것이다.
**명령라인 인터페이스(CLI)**로 선택지가 명령어와 패러미터의 조합으로 표현된다.
사용자에게 제시되는 것이 아니라서 새로운 언어의 어휘를 학습하듯이 일부 학습이 필요하다.
마치 영어 전체를 통달하는 것은 고통스럽고 시간이 많이 들지만, 생활영어 수준으로 영어를 배운다면 삶의 질을 크게 높일 수 있다.
명령어의 일부만 배우게 되면 정말 도움이 많이 되어 핵심적인 명령어만을 중점으로 다룬다.

## 유연성과 자동화 {#shell-flexibility}

쉘문법(Grammar of Shell)은 기존 명령어 도구를 조합해서 강력한 파이프라인을 구축하도록 한다.\index{쉘문법(Grammar of Shell)}
이를 통해서 방대한 데이터를 자동화하여 다룰 수 있다. 명령 순서는 *스크립트 (script)*로 작성하여
작업흐름의 재현가능성을 향상시켜서 쉽게 반복이 가능하도록 한다. 스크립트 작성은 이후 8장에서 소개할 것이다.\index{스크립트(script)}

추가로, 명령 라인은 종종 멀리 떨어진 컴퓨터 혹은 슈퍼컴퓨터와 상호작용하는 가장 쉬
운 방법이다. 고성능 컴퓨팅 시스템에 포함된 다양한 특화된 도구와 자원을 실행하는데
쉘과 친숙성이 거의 필연적이다. 클러스트 컴퓨팅(Cluster Computing, 여러 대의 컴퓨터를 연결하여 단일 시스템처럼 작동)과 클라우드 컴퓨팅(Cloud Computing, 사용자가 필요한 만큼의 컴퓨팅 자원을 인터넷을 통해 제공받을 수 있는 서비스)을 활용한 과학 데이터 크런칭(scientific data cruching)\footnote{'과학적 데이터 크런칭'은 대량의 과학 데이터를 분석하고 처리하는 과정을 의미한다. 이는 대형 가속기에서 생성된 데이터, 천문학적 관측, 생명 과학에서의 유전자 시퀀싱 등 다양한 과학적 분야에서 생성된 대규모 데이터셋을 분석하는데 사용된다. '크런칭(crunching)'이라는 용어는 일반적으로 대규모 데이터를 처리하거나 분석하는 것을 의미하는 비공식적인 용어인데, '과학적 데이터 크런칭'은 이러한 대규모 데이터를 이해하고, 통찰력을 얻으며, 그 결과를 이용하여 과학적 질문에 답하는데 사용되는 방법을 말한다.}이 점점 대중화됨에 따라 원격 컴퓨터를 구동하는 것이 필수적인 기술이 되어가고 있다. 여기서 다뤄지는 명령-라인 기술에 기반해서 광범위한 과
학적 질문과 컴퓨터적 도전과제를 처리할 수 있다.

